---
import Layout from '../layouts/Layout.astro';

// Define collection options
const collections = ['Genocide', 'Nature', 'Politics', 'Technology', 'Culture'];
---

<Layout title="Create Post">
  <div class="flex h-screen bg-white">
    <!-- Editor Section -->
    <div class="flex-1 flex flex-col overflow-hidden">
      <header class="py-4 px-6 border-b flex justify-between items-center">
        <input type="text" name="title" id="title" placeholder="Post Title" class="w-full text-4xl font-bold border-none focus:ring-0 focus:outline-none" />
        <button id="toggleSettings" class="md:hidden bg-gray-200 p-2 rounded-md shadow-md">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
        </button>
      </header>
      
      <div class="flex-1 overflow-y-auto">
        <!-- Media Section -->
        <div class="px-6 pt-4">
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Media</h3>
          <div id="mediaUploadArea" class="w-full aspect-video bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors duration-300">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
            <p class="text-sm text-gray-500">Drag and drop your media here, or <span class="text-indigo-600 font-medium">browse</span></p>
            <p class="text-xs text-gray-400 mt-1">Supports video, audio, and PDF files</p>
          </div>
          <input type="file" name="media-file" id="media-file" accept="video/*,audio/*,application/pdf" class="hidden">
          <div id="mediaPreview" class="mt-4 hidden w-full aspect-video bg-gray-100 rounded-lg overflow-hidden"></div>
          <div id="uploadControls" class="flex items-center justify-between mt-4">
            <span id="selected-file" class="text-sm text-gray-500">No file selected</span>
            <button id="upload-media" class="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
              Upload
            </button>
          </div>
          <!-- Progress bar -->
          <div id="upload-progress" class="w-full bg-gray-200 rounded-full h-2 mt-4 hidden">
            <div class="bg-indigo-600 h-2 rounded-full transition-all duration-300 ease-in-out" style="width: 0%"></div>
          </div>
        </div>

        <div class="px-6 pt-4 text-sm text-gray-500 font-medium">Notes</div>
        <div id="editorjs" class="px-6 py-2"></div>
      </div>
    </div>

    <!-- Settings Panel -->
    <div id="settingsPanel" class="w-96 bg-gray-100 border-l overflow-y-auto transition-transform duration-300 ease-in-out transform md:translate-x-0 translate-x-full fixed top-0 right-0 bottom-0 z-50 md:relative">
      <div class="p-6 space-y-6">
        <div class="flex justify-between items-center">
          <h2 class="text-lg font-semibold text-gray-900">Settings</h2>
          <button id="closeSettings" class="md:hidden text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Feature Image</h3>
          <div id="imagePreview" class="w-full h-48 bg-gray-200 rounded-md flex items-center justify-center mb-2 cursor-pointer">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <input type="file" name="feature-image" id="feature-image" accept="image/*" class="hidden">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Publish</h3>
          <input type="datetime-local" name="datetime" id="datetime" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Authors</h3>
          <input type="text" name="authors" id="authors" placeholder="Add authors" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Collection</h3>
          <select name="collection" id="collection" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
            <option value="">Select a collection</option>
            {collections.map((collection) => (
              <option value={collection}>{collection}</option>
            ))}
          </select>
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Location</h3>
          <input type="text" name="location" id="location" placeholder="Add location" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Tags</h3>
          <input type="text" name="tags" id="tags" placeholder="Add tags" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Excerpt</h3>
          <textarea name="excerpt" id="excerpt" rows="3" placeholder="Write a short excerpt" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"></textarea>
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">SEO Description</h3>
          <textarea name="metadata" id="metadata" rows="3" placeholder="SEO description" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"></textarea>
        </div>

        <button type="submit" class="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Publish
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  import EditorJS from '@editorjs/editorjs';
  import Header from '@editorjs/header';
  import List from '@editorjs/list';
  import Checklist from '@editorjs/checklist';
  import Quote from '@editorjs/quote';
  import Warning from '@editorjs/warning';
  import Marker from '@editorjs/marker';
  import CodeTool from '@editorjs/code';
  import Delimiter from '@editorjs/delimiter';
  import InlineCode from '@editorjs/inline-code';
  import LinkTool from '@editorjs/link';
  import ImageTool from '@editorjs/image';
  import Embed from '@editorjs/embed';
  import Table from '@editorjs/table';

  const editor = new EditorJS({
    holder: 'editorjs',
    placeholder: 'Start writing your post...',
    minHeight: 0, // This allows the editor to shrink when empty
    tools: {
      header: {
        class: Header,
        config: {
          placeholder: 'Enter a header',
          levels: [1, 2, 3, 4, 5, 6],
          defaultLevel: 3,
          shortcut: 'CMD+SHIFT+H'
        }
      },
      list: List,
      checklist: Checklist,
      quote: Quote,
      warning: Warning,
      marker: Marker,
      code: CodeTool,
      delimiter: Delimiter,
      inlineCode: InlineCode,
      linkTool: LinkTool,
      image: {
        class: ImageTool,
        config: {
          uploader: {
            uploadByFile(file: File) {
              console.log('Uploading file in ImageTool:', file);
              return uploadToR2(file).catch(error => {
                console.error('Error in ImageTool uploader:', error);
                alert(`Failed to upload image: ${error.message}`);
                return {
                  success: 0,
                  file: {
                    url: '',
                  },
                };
              });
            },
          },
        },
      },
      embed: {
        class: Embed,
        config: {
          services: {
            youtube: true,
            twitter: {
              regex: /^https?:\/\/(twitter\.com|x\.com)\/(?:#!\/)?(\w+)\/status(es)?\/(\d+)/,
              embedUrl: 'https://platform.twitter.com/embed/Tweet.html?id=<%= remote_id %>',
              html: '<blockquote class="twitter-tweet" data-dnt="true"><a href="<%= url %>"></a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>',
              height: 'auto',
              width: '100%',
              id: (matches: string[]) => matches[matches.length - 1],
            },
            instagram: {
              regex: /(?:https?:\/\/)?(?:www\.)?(?:instagram\.com|instagr\.am)\/(?:p|reel)\/([A-Za-z0-9-_]+)/,
              embedUrl: 'https://www.instagram.com/p/<%= remote_id %>/embed',
              html: '<iframe width="400" height="505" style="border: none; overflow: hidden;" src="<%= embedUrl %>"></iframe>',
              height: 505,
              width: 400,
              id: (matches: string[]) => matches[1],
            },
            spotify: {
              regex: /https:\/\/open\.spotify\.com\/(track|playlist|album)\/([a-zA-Z0-9]+)/,
              embedUrl: 'https://open.spotify.com/embed/<%= remote_id %>',
              html: '<iframe style="border-radius:12px" src="<%= embedUrl %>" width="100%" height="352" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>',
              height: 352,
              width: '100%',
              id: (matches: string[]) => `${matches[1]}/${matches[2]}`,
            },
          }
        }
      },
      table: Table,
    },
    onChange: (api: any, event: CustomEvent) => {
      console.log('Editor content changed:', event);
    },
    onReady: () => {
      console.log('Editor.js is ready to work!');
    },
  });

  // Add this debugging code
  editor.isReady.then(() => {
    const embedTool = editor.blocks.getBlocksCount();
    console.log('Number of blocks:', embedTool);
    console.log('Embed tool configuration:', editor.configuration.tools.embed);
  });

  let selectedFeatureImage: File | null = null;

  // Handle feature image preview
  const featureImageInput = document.getElementById('feature-image') as HTMLInputElement;
  const imagePreview = document.getElementById('imagePreview');

  imagePreview?.addEventListener('click', () => {
    featureImageInput?.click();
  });

  featureImageInput?.addEventListener('change', async (event) => {
    const file = featureImageInput.files?.[0];
    if (file && imagePreview) {
      selectedFeatureImage = file;
      const reader = new FileReader();
      reader.onload = function(e) {
        imagePreview.innerHTML = `<img src="${e.target?.result}" alt="Feature Image Preview" class="w-full h-full object-cover rounded-md">`;
      }
      reader.readAsDataURL(file);
    }
  });

  // Handle form submission
  const form = document.querySelector('form');
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const editorData = await editor.save();
    
    // Create a FormData object to hold all form data
    const formData = new FormData(form);
    
    // Add the editor data to the form data
    formData.append('editorContent', JSON.stringify(editorData));
    
    // If a feature image was selected, add it to the form data
    if (selectedFeatureImage) {
      formData.set('feature-image', selectedFeatureImage);
    }
    
    // Here you would typically send the form data to your server
    console.log('Form data:', Object.fromEntries(formData.entries()));
    
    // Implement your post submission logic here
    // This is where you would upload the image and other data to your server
    try {
      if (selectedFeatureImage) {
        const imageUploadResult = await uploadToR2(selectedFeatureImage);
        console.log('Feature image uploaded:', imageUploadResult);
        // You might want to add the uploaded image URL to your form data here
        formData.append('featureImageUrl', imageUploadResult.file.url);
      }
      
      // Simulate sending data to server (replace with actual API call)
      const response = await fetch('/api/create-post', {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        console.log('Post created successfully');
        // Redirect to the post or show a success message
      } else {
        console.error('Failed to create post');
        // Show an error message to the user
      }
    } catch (error) {
      console.error('Error creating post:', error);
      // Show an error message to the user
    }
  });

  async function uploadToR2(file: File, progressCallback?: (progress: number) => void) {
    try {
      const filename = `${Date.now()}-${file.name}`;
      console.log('Uploading file:', filename);

      const formData = new FormData();
      formData.append('file', file);
      formData.append('filename', filename);
      formData.append('contentType', file.type);

      console.log('FormData:', Object.fromEntries(formData.entries()));

      const response = await fetch('/api/test', {
        method: 'POST',
        body: formData,
      });

      const responseData = await response.json();
      console.log('API response:', responseData);

      if (!response.ok) {
        throw new Error(`Failed to get signed URL: ${responseData.error || response.statusText}`);
      }

      const { signedUrl, publicUrl } = responseData;
      console.log('Received signed URL:', signedUrl);
      console.log('Public URL:', publicUrl);

      // Perform the actual file upload using the signed URL
      const uploadResponse = await fetch(signedUrl, {
        method: 'PUT',
        body: file,
        headers: {
          'Content-Type': file.type,
        },
      });

      console.log('Upload response status:', uploadResponse.status);
      console.log('Upload response headers:', Object.fromEntries(uploadResponse.headers.entries()));

      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        throw new Error(`Failed to upload file: ${uploadResponse.statusText}. Error: ${errorText}`);
      }

      console.log('File uploaded successfully');

      // Verify if the file is accessible
      const checkResponse = await fetch(publicUrl, { method: 'HEAD' });
      console.log('Check response status:', checkResponse.status);

      if (!checkResponse.ok) {
        throw new Error(`File not accessible after upload. Status: ${checkResponse.status}`);
      }

      return {
        success: 1,
        file: {
          url: publicUrl,
        },
      };
    } catch (error) {
      console.error('Error in uploadToR2:', error);
      throw error;
    }
  }

  // Modify the toggle functionality
  const toggleButton = document.getElementById('toggleSettings');
  const closeButton = document.getElementById('closeSettings');
  const settingsPanel = document.getElementById('settingsPanel');
  const editorSection = document.querySelector('.flex-1.flex.flex-col.overflow-hidden');

  function togglePanel() {
    settingsPanel?.classList.toggle('translate-x-full');
    if (window.innerWidth < 768) { // md breakpoint
      editorSection?.classList.toggle('hidden');
    }
  }

  toggleButton?.addEventListener('click', togglePanel);
  closeButton?.addEventListener('click', togglePanel);

  // Handle resize
  function handleResize() {
    if (window.innerWidth >= 768) { // md breakpoint
      settingsPanel?.classList.remove('translate-x-full');
      editorSection?.classList.remove('hidden');
    } else {
      settingsPanel?.classList.add('translate-x-full');
      editorSection?.classList.remove('hidden');
    }
  }

  window.addEventListener('resize', handleResize);
  handleResize(); // Initial call

  // Media file handling
  const mediaUploadArea = document.getElementById('mediaUploadArea');
  const mediaFileInput = document.getElementById('media-file') as HTMLInputElement;
  const mediaPreview = document.getElementById('mediaPreview');
  const uploadControls = document.getElementById('uploadControls');
  const selectedFileSpan = document.getElementById('selected-file');
  const uploadMediaButton = document.getElementById('upload-media') as HTMLButtonElement;
  const uploadProgressBar = document.getElementById('upload-progress');
  const uploadProgressBarFill = uploadProgressBar?.querySelector('div');

  mediaUploadArea?.addEventListener('click', () => {
    mediaFileInput?.click();
  });

  mediaUploadArea?.addEventListener('dragover', (e) => {
    e.preventDefault();
    mediaUploadArea.classList.add('bg-gray-50');
  });

  mediaUploadArea?.addEventListener('dragleave', () => {
    mediaUploadArea.classList.remove('bg-gray-50');
  });

  mediaUploadArea?.addEventListener('drop', (e) => {
    e.preventDefault();
    mediaUploadArea.classList.remove('bg-gray-50');
    if (e.dataTransfer?.files.length) {
      mediaFileInput.files = e.dataTransfer.files;
      handleFileSelection();
    }
  });

  function handleFileSelection() {
    const file = mediaFileInput?.files?.[0];
    if (file && selectedFileSpan && uploadMediaButton) {
      selectedFileSpan.textContent = file.name;
      previewMedia(file);
      mediaUploadArea?.classList.add('hidden');
      mediaPreview?.classList.remove('hidden');
      uploadMediaButton.disabled = false;
      uploadControls?.classList.remove('hidden');
    } else if (selectedFileSpan && uploadMediaButton) {
      selectedFileSpan.textContent = 'No file selected';
      mediaUploadArea?.classList.remove('hidden');
      mediaPreview?.classList.add('hidden');
      uploadMediaButton.disabled = true;
    }
  }

  mediaFileInput?.addEventListener('change', handleFileSelection);

  function previewMedia(file: File) {
    if (!mediaPreview) return;

    const fileType = file.type.split('/')[0];
    let previewElement: HTMLElement;

    switch (fileType) {
      case 'video':
        previewElement = document.createElement('video');
        (previewElement as HTMLVideoElement).src = URL.createObjectURL(file);
        previewElement.className = 'w-full h-full object-cover';
        (previewElement as HTMLVideoElement).controls = true;
        (previewElement as HTMLVideoElement).autoplay = true;
        (previewElement as HTMLVideoElement).loop = true;
        (previewElement as HTMLVideoElement).muted = true;
        break;
      case 'audio':
        previewElement = document.createElement('div');
        previewElement.className = 'w-full h-full bg-gray-100 flex items-center justify-center';
        const audio = document.createElement('audio') as HTMLAudioElement;
        audio.src = URL.createObjectURL(file);
        audio.className = 'w-full max-w-md';
        audio.controls = true;
        previewElement.appendChild(audio);
        break;
      case 'application':
        if (file.type === 'application/pdf') {
          previewElement = document.createElement('div');
          previewElement.className = 'w-full h-full bg-gray-100 flex items-center justify-center';
          const pdfIcon = document.createElement('div');
          pdfIcon.className = 'text-6xl text-gray-400';
          pdfIcon.innerHTML = '📄';
          const pdfText = document.createElement('div');
          pdfText.className = 'mt-2 text-gray-600';
          pdfText.textContent = file.name;
          previewElement.appendChild(pdfIcon);
          previewElement.appendChild(pdfText);
        } else {
          previewElement = document.createElement('div');
          previewElement.className = 'w-full h-full flex items-center justify-center text-gray-500';
          previewElement.textContent = 'Preview not available for this file type';
        }
        break;
      default:
        previewElement = document.createElement('div');
        previewElement.className = 'w-full h-full flex items-center justify-center text-gray-500';
        previewElement.textContent = 'Preview not available for this file type';
    }

    mediaPreview.innerHTML = '';
    mediaPreview.appendChild(previewElement);
  }

  uploadMediaButton?.addEventListener('click', async () => {
    const file = mediaFileInput?.files?.[0];
    if (file) {
      try {
        uploadProgressBar?.classList.remove('hidden');
        uploadMediaButton.disabled = true;
        const result = await uploadToR2(file, updateProgress);
        console.log('Media uploaded successfully:', result);
        
        // Keep the preview visible
        mediaPreview?.classList.remove('hidden');
        
        // Hide upload controls
        uploadControls?.classList.add('hidden');
      } catch (error) {
        console.error('Failed to upload media:', error);
        alert('Failed to upload media. Please try again.');
      } finally {
        uploadProgressBar?.classList.add('hidden');
        if (uploadProgressBarFill) uploadProgressBarFill.style.width = '0%';
      }
    } else {
      alert('Please select a file to upload.');
    }
  });

  function updateProgress(progress: number) {
    if (uploadProgressBarFill) {
      uploadProgressBarFill.style.width = `${progress}%`;
    }
  }

  // Add event listener for closing the settings panel
  const closeSettingsButton = document.getElementById('closeSettings');
  closeSettingsButton?.addEventListener('click', () => {
    settingsPanel?.classList.add('translate-x-full');
    editorSection?.classList.remove('hidden');
  });
</script>

<style>
  /* Add these styles for a cleaner look */
  input, textarea, select {
    @apply text-gray-900 placeholder-gray-400 border-gray-300 rounded-md;
    transition: border-color 0.2s ease-in-out;
  }

  input:focus, textarea:focus, select:focus {
    @apply outline-none border-indigo-500;
    box-shadow: 0 0 0 1px rgba(79, 70, 229, 0.2);
  }

  /* Specific style for the title input */
  #title {
    @apply text-4xl font-bold border-none;
  }

  #title:focus {
    @apply outline-none;
    box-shadow: none;
  }

  /* EditorJS styles */
  #editorjs {
    @apply max-w-none px-0;
    min-height: 300px;
    height: 100%;
  }

  /* Add custom styles for Editor.js to ensure consistent left alignment */
  :global(.ce-block__content),
  :global(.ce-toolbar__content) {
    max-width: none;
    margin-left: 0;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
  }

  /* Additional styles for better text formatting */
  :global(.ce-block__content h1) {
    @apply text-3xl font-bold mb-4;
  }

  :global(.ce-block__content h2) {
    @apply text-2xl font-bold mb-3;
  }

  :global(.ce-block__content h3) {
    @apply text-xl font-bold mb-2;
  }

  :global(.ce-block__content p) {
    @apply mb-4;
  }

  :global(.ce-block__content ul, .ce-block__content ol) {
    @apply mb-4 pl-5;
  }

  :global(.ce-block__content li) {
    @apply mb-1;
  }

  :global(.ce-block__content blockquote) {
    @apply border-l-4 border-gray-300 pl-4 italic my-4;
  }

  #imagePreview {
    transition: all 0.3s ease;
  }

  #imagePreview:hover {
    opacity: 0.8;
  }

  /* Simplify toggle button styles */
  #toggleSettings {
    @apply bg-gray-200;
  }

  #toggleSettings:hover {
    @apply bg-gray-300;
  }

  /* Hide toggle button on desktop */
  @media (min-width: 768px) {
    #toggleSettings {
      display: none;
    }
  }

  #mediaPreview {
    transition: all 0.3s ease;
  }

  #mediaPreview:hover {
    opacity: 0.9;
  }

  #mediaPreview video,
  #mediaPreview audio {
    outline: none;
  }

  #mediaPreview audio::-webkit-media-controls-panel {
    background-color: rgba(255, 255, 255, 0.8);
  }

  #mediaPreview audio::-webkit-media-controls-current-time-display,
  #mediaPreview audio::-webkit-media-controls-time-remaining-display {
    color: #4a5568;
  }

  #uploadedCard {
    animation: fadeIn 0.5s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Adjust styles for full-screen editor on mobile and tablet */
  @media (max-width: 767px) {
    #editorjs {
      min-height: calc(100vh - 120px); /* Adjust based on your header height */
    }
  }

  /* Settings panel styles */
  #settingsPanel {
    transition: transform 0.3s ease-in-out;
  }

  @media (max-width: 767px) {
    #settingsPanel {
      width: 100%;
    }
  }
</style>