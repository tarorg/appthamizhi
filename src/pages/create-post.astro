---
import Layout from '../layouts/Layout.astro';

// Define collection options
const collections = ['Genocide', 'Nature', 'Politics', 'Technology', 'Culture'];
---

<Layout title="Create Post">
  <div class="flex h-screen bg-white">
    <!-- Editor Section -->
    <div class="flex-1 flex flex-col overflow-hidden">
      <header class="py-4 px-6 border-b">
        <input type="text" name="title" id="title" placeholder="Post Title" class="w-full text-4xl font-bold border-none focus:ring-0 focus:outline-none" />
      </header>
      <div id="editorjs" class="flex-1 overflow-y-auto px-6 py-4"></div>
    </div>

    <!-- Settings Panel -->
    <div class="w-96 bg-gray-100 border-l overflow-y-auto">
      <div class="p-6 space-y-6">
        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Feature Image</h3>
          <div id="imagePreview" class="w-full h-48 bg-gray-200 rounded-md flex items-center justify-center mb-2 cursor-pointer">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <input type="file" name="feature-image" id="feature-image" accept="image/*" class="hidden">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Publish</h3>
          <input type="datetime-local" name="datetime" id="datetime" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Authors</h3>
          <input type="text" name="authors" id="authors" placeholder="Add authors" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Collection</h3>
          <select name="collection" id="collection" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
            <option value="">Select a collection</option>
            {collections.map((collection) => (
              <option value={collection}>{collection}</option>
            ))}
          </select>
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Location</h3>
          <input type="text" name="location" id="location" placeholder="Add location" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Tags</h3>
          <input type="text" name="tags" id="tags" placeholder="Add tags" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">Excerpt</h3>
          <textarea name="excerpt" id="excerpt" rows="3" placeholder="Write a short excerpt" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"></textarea>
        </div>

        <div>
          <h3 class="text-sm uppercase text-gray-500 font-semibold mb-2">SEO Description</h3>
          <textarea name="metadata" id="metadata" rows="3" placeholder="SEO description" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"></textarea>
        </div>

        <button type="submit" class="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Publish
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  import EditorJS from '@editorjs/editorjs';
  import Header from '@editorjs/header';
  import List from '@editorjs/list';
  import Checklist from '@editorjs/checklist';
  import Quote from '@editorjs/quote';
  import Warning from '@editorjs/warning';
  import Marker from '@editorjs/marker';
  import CodeTool from '@editorjs/code';
  import Delimiter from '@editorjs/delimiter';
  import InlineCode from '@editorjs/inline-code';
  import LinkTool from '@editorjs/link';
  import ImageTool from '@editorjs/image';
  import Embed from '@editorjs/embed';
  import Table from '@editorjs/table';

  const editor = new EditorJS({
    holder: 'editorjs',
    placeholder: 'Start writing your post...',
    tools: {
      header: {
        class: Header,
        config: {
          placeholder: 'Enter a header',
          levels: [1, 2, 3, 4, 5, 6],
          defaultLevel: 3,
          shortcut: 'CMD+SHIFT+H'
        }
      },
      list: List,
      checklist: Checklist,
      quote: Quote,
      warning: Warning,
      marker: Marker,
      code: CodeTool,
      delimiter: Delimiter,
      inlineCode: InlineCode,
      linkTool: LinkTool,
      image: {
        class: ImageTool,
        config: {
          uploader: {
            uploadByFile(file: File) {
              console.log('Uploading file in ImageTool:', file);
              return uploadToR2(file).catch(error => {
                console.error('Error in ImageTool uploader:', error);
                alert(`Failed to upload image: ${error.message}`);
                return {
                  success: 0,
                  file: {
                    url: '',
                  },
                };
              });
            },
          },
        },
      },
      embed: {
        class: Embed,
        config: {
          services: {
            youtube: true,
            twitter: {
              regex: /^https?:\/\/(twitter\.com|x\.com)\/(?:#!\/)?(\w+)\/status(es)?\/(\d+)/,
              embedUrl: 'https://platform.twitter.com/embed/Tweet.html?id=<%= remote_id %>',
              html: '<blockquote class="twitter-tweet" data-dnt="true"><a href="<%= url %>"></a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>',
              height: 'auto',
              width: '100%',
              id: (matches: string[]) => matches[matches.length - 1],
            },
            instagram: {
              regex: /(?:https?:\/\/)?(?:www\.)?(?:instagram\.com|instagr\.am)\/(?:p|reel)\/([A-Za-z0-9-_]+)/,
              embedUrl: 'https://www.instagram.com/p/<%= remote_id %>/embed',
              html: '<iframe width="400" height="505" style="border: none; overflow: hidden;" src="<%= embedUrl %>"></iframe>',
              height: 505,
              width: 400,
              id: (matches: string[]) => matches[1],
            },
            spotify: {
              regex: /https:\/\/open\.spotify\.com\/(track|playlist|album)\/([a-zA-Z0-9]+)/,
              embedUrl: 'https://open.spotify.com/embed/<%= remote_id %>',
              html: '<iframe style="border-radius:12px" src="<%= embedUrl %>" width="100%" height="352" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>',
              height: 352,
              width: '100%',
              id: (matches: string[]) => `${matches[1]}/${matches[2]}`,
            },
          }
        }
      },
      table: Table,
    },
    onChange: (api: any, event: CustomEvent) => {
      console.log('Editor content changed:', event);
    },
    onReady: () => {
      console.log('Editor.js is ready to work!');
    },
  });

  // Add this debugging code
  editor.isReady.then(() => {
    const embedTool = editor.blocks.getBlocksCount();
    console.log('Number of blocks:', embedTool);
    console.log('Embed tool configuration:', editor.configuration.tools.embed);
  });

  let selectedFeatureImage: File | null = null;

  // Handle feature image preview
  const featureImageInput = document.getElementById('feature-image') as HTMLInputElement;
  const imagePreview = document.getElementById('imagePreview');

  imagePreview?.addEventListener('click', () => {
    featureImageInput?.click();
  });

  featureImageInput?.addEventListener('change', async (event) => {
    const file = featureImageInput.files?.[0];
    if (file && imagePreview) {
      selectedFeatureImage = file;
      const reader = new FileReader();
      reader.onload = function(e) {
        imagePreview.innerHTML = `<img src="${e.target?.result}" alt="Feature Image Preview" class="w-full h-full object-cover rounded-md">`;
      }
      reader.readAsDataURL(file);
    }
  });

  // Handle form submission
  const form = document.querySelector('form');
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const editorData = await editor.save();
    
    // Create a FormData object to hold all form data
    const formData = new FormData(form);
    
    // Add the editor data to the form data
    formData.append('editorContent', JSON.stringify(editorData));
    
    // If a feature image was selected, add it to the form data
    if (selectedFeatureImage) {
      formData.set('feature-image', selectedFeatureImage);
    }
    
    // Here you would typically send the form data to your server
    console.log('Form data:', Object.fromEntries(formData.entries()));
    
    // Implement your post submission logic here
    // This is where you would upload the image and other data to your server
    try {
      if (selectedFeatureImage) {
        const imageUploadResult = await uploadToR2(selectedFeatureImage);
        console.log('Feature image uploaded:', imageUploadResult);
        // You might want to add the uploaded image URL to your form data here
        formData.append('featureImageUrl', imageUploadResult.file.url);
      }
      
      // Simulate sending data to server (replace with actual API call)
      const response = await fetch('/api/create-post', {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        console.log('Post created successfully');
        // Redirect to the post or show a success message
      } else {
        console.error('Failed to create post');
        // Show an error message to the user
      }
    } catch (error) {
      console.error('Error creating post:', error);
      // Show an error message to the user
    }
  });

  async function uploadToR2(file: File) {
    try {
      const filename = `${Date.now()}-${file.name}`;
      console.log('Uploading file:', filename);

      const formData = new FormData();
      formData.append('file', file);
      formData.append('filename', filename);
      formData.append('contentType', file.type);

      console.log('FormData:', Object.fromEntries(formData.entries()));

      const response = await fetch('/api/test', {
        method: 'POST',
        body: formData,
      });

      const responseData = await response.json();
      console.log('API response:', responseData);

      if (!response.ok) {
        throw new Error(`Failed to get signed URL: ${responseData.error || response.statusText}`);
      }

      const { signedUrl, publicUrl } = responseData;
      console.log('Received signed URL:', signedUrl);
      console.log('Public URL:', publicUrl);

      // Perform the actual file upload using the signed URL
      const uploadResponse = await fetch(signedUrl, {
        method: 'PUT',
        body: file,
        headers: {
          'Content-Type': file.type,
        },
      });

      console.log('Upload response status:', uploadResponse.status);
      console.log('Upload response headers:', Object.fromEntries(uploadResponse.headers.entries()));

      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        throw new Error(`Failed to upload file: ${uploadResponse.statusText}. Error: ${errorText}`);
      }

      console.log('File uploaded successfully');

      // Verify if the file is accessible
      const checkResponse = await fetch(publicUrl, { method: 'HEAD' });
      console.log('Check response status:', checkResponse.status);

      if (!checkResponse.ok) {
        throw new Error(`File not accessible after upload. Status: ${checkResponse.status}`);
      }

      return {
        success: 1,
        file: {
          url: publicUrl,
        },
      };
    } catch (error) {
      console.error('Error in uploadToR2:', error);
      throw error;
    }
  }
</script>

<style>
  /* Add these styles for a cleaner look */
  input, textarea {
    @apply text-gray-900 placeholder-gray-400;
  }

  input:focus, textarea:focus {
    @apply ring-2 ring-indigo-500 border-indigo-500;
  }

  /* EditorJS styles */
  #editorjs {
    @apply max-w-none;
  }

  /* Add custom styles for Editor.js to ensure consistent left alignment */
  :global(.ce-block__content) {
    max-width: none;
    margin-left: 0;
  }

  :global(.ce-toolbar__content) {
    max-width: none;
  }

  /* Additional styles for better text formatting */
  :global(.ce-block__content h1) {
    @apply text-3xl font-bold mb-4;
  }

  :global(.ce-block__content h2) {
    @apply text-2xl font-bold mb-3;
  }

  :global(.ce-block__content h3) {
    @apply text-xl font-bold mb-2;
  }

  :global(.ce-block__content p) {
    @apply mb-4;
  }

  :global(.ce-block__content ul, .ce-block__content ol) {
    @apply mb-4 pl-5;
  }

  :global(.ce-block__content li) {
    @apply mb-1;
  }

  :global(.ce-block__content blockquote) {
    @apply border-l-4 border-gray-300 pl-4 italic my-4;
  }

  #imagePreview {
    transition: all 0.3s ease;
  }

  #imagePreview:hover {
    opacity: 0.8;
  }
</style>