---
import { Image } from 'astro:assets';

interface MastodonPost {
  id: string;
  created_at: string;
  account: {
    display_name: string;
    username: string;
    avatar: string;
    acct: string;
  };
  content: string;
  media_attachments: {
    type: string;
    url: string;
    preview_url: string;
  }[];
  favourites_count: number;
  reblogs_count: number;
}

const accessToken = import.meta.env.PUBLIC_MASTODON_ACCESS_TOKEN;
const apiUrl = 'https://thamizhi.xyz/api/v1/timelines/public?local=true';

let posts: MastodonPost[] = [];
let error: string | null = null;

try {
  const response = await fetch(apiUrl, {
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  posts = await response.json();
  posts = posts.filter(post => !post.account.acct.includes('@') || post.account.acct.endsWith('@thamizhi.xyz'));
} catch (e) {
  console.error('Error fetching posts:', e);
  error = 'Failed to load posts. Please try again later.';
}
---

<section id="feed" class="max-w-xl mx-auto">
  {error && <p class="text-red-500 text-center py-4">{error}</p>}
  <div class="space-y-8">
    {posts.map((post) => (
      <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
        <div class="flex items-center p-4">
          <img
            src={post.account.avatar}
            alt={post.account.display_name}
            width="32"
            height="32"
            class="rounded-full mr-3"
          />
          <div>
            <p class="font-semibold text-sm">{post.account.display_name}</p>
            <p class="text-xs text-gray-500">@{post.account.username}</p>
          </div>
        </div>
        {post.media_attachments.length > 0 && (
          <div class="relative pb-[100%]">
            <img
              src={post.media_attachments[0].url}
              alt="Post media"
              class="absolute top-0 left-0 w-full h-full object-cover"
            />
          </div>
        )}
        <div class="p-4">
          <div class="text-sm mb-4">
            <span set:html={post.content} />
          </div>
          <div class="flex justify-between items-center">
            <p class="text-xs text-gray-500">{new Date(post.created_at).toLocaleString()}</p>
            <div class="flex space-x-4">
              <button class="text-gray-500 hover:text-red-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                </svg>
              </button>
              <button class="text-gray-500 hover:text-blue-500 comment-button" data-post-id={post.id}>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
                </svg>
              </button>
              <button class="text-gray-500 hover:text-green-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="17 1 21 5 17 9"></polyline>
                  <path d="M3 11V9a4 4 0 0 1 4-4h14"></path>
                  <polyline points="7 23 3 19 7 15"></polyline>
                  <path d="M21 13v2a4 4 0 0 1-4 4H3"></path>
                </svg>
              </button>
            </div>
          </div>
          <div class="comment-form hidden mt-4" data-post-id={post.id}>
            <textarea class="w-full p-2 border rounded" placeholder="Write a comment..."></textarea>
            <button class="mt-2 bg-blue-500 text-white px-4 py-2 rounded submit-comment" data-post-id={post.id}>Submit Comment</button>
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const commentButtons = document.querySelectorAll('.comment-button');
    const submitButtons = document.querySelectorAll('.submit-comment');

    commentButtons.forEach(button => {
      button.addEventListener('click', () => {
        const postId = button.getAttribute('data-post-id');
        const commentForm = document.querySelector(`.comment-form[data-post-id="${postId}"]`);
        if (commentForm) {
          commentForm.classList.toggle('hidden');
        }
      });
    });

    submitButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const postId = button.getAttribute('data-post-id');
        const commentForm = document.querySelector(`.comment-form[data-post-id="${postId}"]`);
        if (!commentForm) return;
        const commentText = commentForm.querySelector('textarea')?.value;

        if (!commentText || commentText.trim() === '') return;

        try {
          const accessToken = localStorage.getItem('mastodon_access_token');
          if (!accessToken) {
            throw new Error('Mastodon account not connected');
          }

          const response = await fetch(`https://thamizhi.xyz/api/v1/statuses`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${accessToken}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: commentText, in_reply_to_id: postId })
          });

          if (response.ok) {
            alert('Comment posted successfully!');
            const textarea = commentForm.querySelector('textarea');
            if (textarea) textarea.value = '';
            commentForm.classList.add('hidden');
          } else {
            throw new Error('Failed to post comment');
          }
        } catch (error) {
          console.error('Error posting comment:', error);
          alert('Failed to post comment. Please try again.');
        }
      });
    });
  });
</script>

<style>
  /* Add any additional styles here */
  :global(.toot-content a) {
    color: #3b82f6;
    text-decoration: none;
  }
  :global(.toot-content a:hover) {
    text-decoration: underline;
  }
</style>