---
import Layout from '../layouts/Layout.astro';

// Define collection options
const collections = ['Genocide', 'Nature', 'Politics', 'Technology', 'Culture'];
---

<Layout title="Create Post">
  <div class="flex h-screen bg-gray-100">
    <!-- Left Panel -->
    <aside class="w-64 bg-white border-r flex flex-col">
      <div class="flex-1 overflow-y-auto">
        <!-- Update the post title input in the Left Panel -->
        <div class="p-4">
          <textarea
            name="title"
            id="title"
            placeholder="Post Title"
            class="w-full text-xl font-bold border-none focus:ring-0 focus:outline-none resize-none overflow-hidden"
            rows="1"
          ></textarea>
        </div>
        <nav class="p-4 space-y-2">
          <button class="w-full text-left px-4 py-2 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" id="mediaBtn">
            Media
          </button>
          <button class="w-full text-left px-4 py-2 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" id="notesBtn">
            Notes
          </button>
          <button class="w-full text-left px-4 py-2 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" id="logsBtn">
            Logs
          </button>
          <button class="w-full text-left px-4 py-2 text-sm font-medium text-gray-700 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" id="metadataBtn">
            Metadata
          </button>
        </nav>
      </div>
      <div class="p-4 border-t">
        <button type="submit" class="w-full px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Publish
        </button>
      </div>
    </aside>

    <!-- Right Panel -->
    <div class="flex-1 overflow-hidden">
      <!-- Media Content -->
      <div id="mediaContent" class="h-full overflow-y-auto p-6 bg-white hidden">
        <h2 class="text-2xl font-bold mb-4">Media Upload</h2>
        <div id="mediaUploadArea" class="w-full aspect-video bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors duration-300">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
          </svg>
          <p class="text-sm text-gray-500">Drag and drop your media here, or <span class="text-indigo-600 font-medium">browse</span></p>
          <p class="text-xs text-gray-400 mt-1">Supports video, audio, and PDF files</p>
        </div>
        <input type="file" name="media-file" id="media-file" accept="video/*,audio/*,application/pdf" class="hidden">
        <div id="mediaPreview" class="mt-4 hidden w-full aspect-video bg-gray-100 rounded-lg overflow-hidden"></div>
        <div id="uploadControls" class="flex items-center justify-between mt-4">
          <span id="selected-file" class="text-sm text-gray-500">No file selected</span>
          <button id="upload-media" class="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
            Upload
          </button>
        </div>
        <div id="upload-progress" class="w-full bg-gray-200 rounded-full h-2 mt-4 hidden">
          <div class="bg-indigo-600 h-2 rounded-full transition-all duration-300 ease-in-out" style="width: 0%"></div>
        </div>
      </div>

      <!-- Notes Content -->
      <div id="notesContent" class="h-full overflow-y-auto bg-white hidden">
        <h2 class="text-2xl font-bold mb-6 px-10 pt-10">Notes</h2>
        <div id="editorjs" class="bg-white px-10 pb-10"></div>
      </div>

      <!-- Logs Content -->
      <div id="logsContent" class="h-full overflow-y-auto p-6 bg-white hidden">
        <div class="flex items-center mb-4">
          <div class="relative flex-grow">
            <input type="text" id="logSearch" placeholder="Search logs..." class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
            </svg>
          </div>
          <button id="addLogBtn" class="ml-2 p-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
        <div id="logEntries" class="space-y-2">
          <!-- Log entries will be dynamically added here -->
        </div>
      </div>

      <!-- Add Log Form Modal -->
      <div id="addLogModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
          <div class="mt-3 text-center">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Add New Log</h3>
            <div class="mt-2 px-7 py-3">
              <input type="text" id="logName" placeholder="Name" class="mb-3 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
              <input type="number" id="logAge" placeholder="Age" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
            </div>
            <div class="items-center px-4 py-3">
              <button id="submitLogBtn" class="px-4 py-2 bg-indigo-600 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                Add Log
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Metadata Content -->
      <div id="metadataContent" class="h-full overflow-y-auto p-6 bg-white hidden">
        <h2 class="text-2xl font-bold mb-4">Metadata</h2>
        <div class="space-y-6">
          <!-- Feature Image -->
          <div>
            <label for="feature-image" class="block text-sm font-medium text-gray-700">Feature Image</label>
            <div id="imagePreview" class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
              <div class="space-y-1 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172 9.172a4 4 0 01-5.656 5.656L8 32m24 0l4 4m0-24l-4 4m16 4l-4 4m0-12l4 4m-4-4l4 4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <div class="flex text-sm text-gray-600">
                  <label for="feature-image" class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500">
                    <span>Upload a file</span>
                    <input id="feature-image" name="feature-image" type="file" class="sr-only">
                  </label>
                  <p class="pl-1">or drag and drop</p>
                </div>
                <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
              </div>
            </div>
          </div>

          <!-- Other metadata fields -->
          <div>
            <label for="datetime" class="block text-sm font-medium text-gray-700">Publish Date and Time</label>
            <input type="datetime-local" name="datetime" id="datetime" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
          </div>

          <div>
            <label for="authors" class="block text-sm font-medium text-gray-700">Authors</label>
            <input type="text" name="authors" id="authors" placeholder="Add authors" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
          </div>

          <div>
            <label for="collection" class="block text-sm font-medium text-gray-700">Collection</label>
            <select id="collection" name="collection" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
              <option value="">Select a collection</option>
              {collections.map((collection) => (
                <option value={collection}>{collection}</option>
              ))}
            </select>
          </div>

          <div>
            <label for="location" class="block text-sm font-medium text-gray-700">Location</label>
            <input type="text" name="location" id="location" placeholder="Add location" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
          </div>

          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700">Tags</label>
            <input type="text" name="tags" id="tags" placeholder="Add tags" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
          </div>

          <div>
            <label for="excerpt" class="block text-sm font-medium text-gray-700">Excerpt</label>
            <textarea name="excerpt" id="excerpt" rows="3" placeholder="Write a short excerpt" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
          </div>

          <div>
            <label for="metadata" class="block text-sm font-medium text-gray-700">SEO Description</label>
            <textarea name="metadata" id="metadata" rows="3" placeholder="SEO description" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import EditorJS from '@editorjs/editorjs';
  import Header from '@editorjs/header';
  import List from '@editorjs/list';
  import Checklist from '@editorjs/checklist';
  import Quote from '@editorjs/quote';
  import Warning from '@editorjs/warning';
  import Marker from '@editorjs/marker';
  import CodeTool from '@editorjs/code';
  import Delimiter from '@editorjs/delimiter';
  import InlineCode from '@editorjs/inline-code';
  import LinkTool from '@editorjs/link';
  import ImageTool from '@editorjs/image';
  import Embed from '@editorjs/embed';
  import Table from '@editorjs/table';

  const editor = new EditorJS({
    holder: 'editorjs',
    placeholder: 'Start writing your post...',
    minHeight: 0,
    tools: {
      header: {
        class: Header,
        config: {
          levels: [1, 2, 3, 4, 5, 6],
          defaultLevel: 3,
          shortcut: 'CMD+SHIFT+H'
        }
      },
      list: List,
      checklist: Checklist,
      quote: Quote,
      warning: Warning,
      marker: Marker,
      code: CodeTool,
      delimiter: Delimiter,
      inlineCode: InlineCode,
      linkTool: LinkTool,
      image: {
        class: ImageTool,
        config: {
          uploader: {
            uploadByFile(file: File) {
              console.log('Uploading file in ImageTool:', file);
              return uploadToR2(file).catch(error => {
                console.error('Error in ImageTool uploader:', error);
                alert(`Failed to upload image: ${error.message}`);
                return {
                  success: 0,
                  file: {
                    url: '',
                  },
                };
              });
            },
          },
        },
      },
      embed: {
        class: Embed,
        config: {
          services: {
            youtube: true,
            twitter: {
              regex: /^https?:\/\/(twitter\.com|x\.com)\/(?:#!\/)?(\w+)\/status(es)?\/(\d+)/,
              embedUrl: 'https://platform.twitter.com/embed/Tweet.html?id=<%= remote_id %>',
              html: '<blockquote class="twitter-tweet" data-dnt="true"><a href="<%= url %>"></a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>',
              height: 'auto',
              width: '100%',
              id: (matches: string[]) => matches[matches.length - 1],
            },
            instagram: {
              regex: /(?:https?:\/\/)?(?:www\.)?(?:instagram\.com|instagr\.am)\/(?:p|reel)\/([A-Za-z0-9-_]+)/,
              embedUrl: 'https://www.instagram.com/p/<%= remote_id %>/embed',
              html: '<iframe width="400" height="505" style="border: none; overflow: hidden;" src="<%= embedUrl %>"></iframe>',
              height: 505,
              width: 400,
              id: (matches: string[]) => matches[1],
            },
            spotify: {
              regex: /https:\/\/open\.spotify\.com\/(track|playlist|album)\/([a-zA-Z0-9]+)/,
              embedUrl: 'https://open.spotify.com/embed/<%= remote_id %>',
              html: '<iframe style="border-radius:12px" src="<%= embedUrl %>" width="100%" height="352" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>',
              height: 352,
              width: '100%',
              id: (matches: string[]) => `${matches[1]}/${matches[2]}`,
            },
          }
        }
      },
      table: Table,
    },
    onChange: (api: any, event: CustomEvent) => {
      console.log('Editor content changed:', event);
    },
    onReady: () => {
      console.log('Editor.js is ready to work!');
    },
  });

  // Add this debugging code
  editor.isReady.then(() => {
    const embedTool = editor.blocks.getBlocksCount();
    console.log('Number of blocks:', embedTool);
    console.log('Embed tool configuration:', editor.configuration.tools.embed);
  });

  let selectedFeatureImage: File | null = null;

  // Handle feature image preview
  const featureImageInput = document.getElementById('feature-image') as HTMLInputElement;
  const imagePreview = document.getElementById('imagePreview');

  imagePreview?.addEventListener('click', () => {
    featureImageInput?.click();
  });

  featureImageInput?.addEventListener('change', async (event) => {
    const file = featureImageInput.files?.[0];
    if (file && imagePreview) {
      selectedFeatureImage = file;
      const reader = new FileReader();
      reader.onload = function(e) {
        imagePreview.innerHTML = `<img src="${e.target?.result}" alt="Feature Image Preview" class="w-full h-full object-cover rounded-md">`;
      }
      reader.readAsDataURL(file);
    }
  });

  // Handle form submission
  const form = document.querySelector('form');
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const editorData = await editor.save();
    
    // Create a FormData object to hold all form data
    const formData = new FormData(form);
    
    // Add the editor data to the form data
    formData.append('editorContent', JSON.stringify(editorData));
    
    // If a feature image was selected, add it to the form data
    if (selectedFeatureImage) {
      formData.set('feature-image', selectedFeatureImage);
    }
    
    // Here you would typically send the form data to your server
    console.log('Form data:', Object.fromEntries(formData.entries()));
    
    // Implement your post submission logic here
    // This is where you would upload the image and other data to your server
    try {
      if (selectedFeatureImage) {
        const imageUploadResult = await uploadToR2(selectedFeatureImage);
        console.log('Feature image uploaded:', imageUploadResult);
        // You might want to add the uploaded image URL to your form data here
        formData.append('featureImageUrl', imageUploadResult.file.url);
      }
      
      // Simulate sending data to server (replace with actual API call)
      const response = await fetch('/api/create-post', {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        console.log('Post created successfully');
        // Redirect to the post or show a success message
      } else {
        console.error('Failed to create post');
        // Show an error message to the user
      }
    } catch (error) {
      console.error('Error creating post:', error);
      // Show an error message to the user
    }
  });

  async function uploadToR2(file: File, progressCallback?: (progress: number) => void) {
    try {
      const filename = `${Date.now()}-${file.name}`;
      console.log('Uploading file:', filename);

      // Create the JSON payload
      const payload = JSON.stringify({
        filename: filename,
        contentType: file.type
      });

      const response = await fetch('/api/upload', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: payload
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to get signed URL: ${response.status} ${response.statusText}. Error: ${errorText}`);
      }

      const responseData = await response.json();
      console.log('API response:', responseData);

      const { signedUrl, publicUrl } = responseData;
      console.log('Received signed URL:', signedUrl);
      console.log('Public URL:', publicUrl);

      // Perform the actual file upload using the signed URL
      const uploadResponse = await fetch(signedUrl, {
        method: 'PUT',
        body: file,
        headers: {
          'Content-Type': file.type,
        },
      });

      console.log('Upload response status:', uploadResponse.status);
      console.log('Upload response headers:', Object.fromEntries(uploadResponse.headers.entries()));

      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        throw new Error(`Failed to upload file: ${uploadResponse.statusText}. Error: ${errorText}`);
      }

      console.log('File uploaded successfully');

      // Verify if the file is accessible
      const checkResponse = await fetch(publicUrl, { method: 'HEAD' });
      console.log('Check response status:', checkResponse.status);

      if (!checkResponse.ok) {
        throw new Error(`File not accessible after upload. Status: ${checkResponse.status}`);
      }

      return {
        success: 1,
        file: {
          url: publicUrl,
        },
      };
    } catch (error) {
      console.error('Error in uploadToR2:', error);
      throw error;
    }
  }

  // Media file handling
  const mediaUploadArea = document.getElementById('mediaUploadArea');
  const mediaFileInput = document.getElementById('media-file') as HTMLInputElement;
  const mediaPreview = document.getElementById('mediaPreview');
  const uploadControls = document.getElementById('uploadControls');
  const selectedFileSpan = document.getElementById('selected-file');
  const uploadMediaButton = document.getElementById('upload-media') as HTMLButtonElement;
  const uploadProgressBar = document.getElementById('upload-progress');
  const uploadProgressBarFill = uploadProgressBar?.querySelector('div');

  mediaUploadArea?.addEventListener('click', () => {
    mediaFileInput?.click();
  });

  mediaUploadArea?.addEventListener('dragover', (e) => {
    e.preventDefault();
    mediaUploadArea.classList.add('bg-gray-50');
  });

  mediaUploadArea?.addEventListener('dragleave', () => {
    mediaUploadArea.classList.remove('bg-gray-50');
  });

  mediaUploadArea?.addEventListener('drop', (e) => {
    e.preventDefault();
    mediaUploadArea.classList.remove('bg-gray-50');
    if (e.dataTransfer?.files.length) {
      mediaFileInput.files = e.dataTransfer.files;
      handleFileSelection();
    }
  });

  function handleFileSelection() {
    const file = mediaFileInput?.files?.[0];
    if (file && selectedFileSpan && uploadMediaButton) {
      selectedFileSpan.textContent = file.name;
      previewMedia(file);
      mediaUploadArea?.classList.add('hidden');
      mediaPreview?.classList.remove('hidden');
      uploadMediaButton.disabled = false;
      uploadControls?.classList.remove('hidden');
    } else if (selectedFileSpan && uploadMediaButton) {
      selectedFileSpan.textContent = 'No file selected';
      mediaUploadArea?.classList.remove('hidden');
      mediaPreview?.classList.add('hidden');
      uploadMediaButton.disabled = true;
    }
  }

  mediaFileInput?.addEventListener('change', handleFileSelection);

  function previewMedia(file: File) {
    if (!mediaPreview) return;

    const fileType = file.type.split('/')[0];
    let previewElement: HTMLElement;

    switch (fileType) {
      case 'video':
        previewElement = document.createElement('video');
        (previewElement as HTMLVideoElement).src = URL.createObjectURL(file);
        previewElement.className = 'w-full h-full object-cover';
        (previewElement as HTMLVideoElement).controls = true;
        (previewElement as HTMLVideoElement).autoplay = true;
        (previewElement as HTMLVideoElement).loop = true;
        (previewElement as HTMLVideoElement).muted = true;
        break;
      case 'audio':
        previewElement = document.createElement('div');
        previewElement.className = 'w-full h-full bg-gray-100 flex items-center justify-center';
        const audio = document.createElement('audio') as HTMLAudioElement;
        audio.src = URL.createObjectURL(file);
        audio.className = 'w-full max-w-md';
        audio.controls = true;
        previewElement.appendChild(audio);
        break;
      case 'application':
        if (file.type === 'application/pdf') {
          previewElement = document.createElement('div');
          previewElement.className = 'w-full h-full bg-gray-100 flex items-center justify-center';
          const pdfIcon = document.createElement('div');
          pdfIcon.className = 'text-6xl text-gray-400';
          pdfIcon.innerHTML = '📄';
          const pdfText = document.createElement('div');
          pdfText.className = 'mt-2 text-gray-600';
          pdfText.textContent = file.name;
          previewElement.appendChild(pdfIcon);
          previewElement.appendChild(pdfText);
        } else {
          previewElement = document.createElement('div');
          previewElement.className = 'w-full h-full flex items-center justify-center text-gray-500';
          previewElement.textContent = 'Preview not available for this file type';
        }
        break;
      default:
        previewElement = document.createElement('div');
        previewElement.className = 'w-full h-full flex items-center justify-center text-gray-500';
        previewElement.textContent = 'Preview not available for this file type';
    }

    mediaPreview.innerHTML = '';
    mediaPreview.appendChild(previewElement);
  }

  uploadMediaButton?.addEventListener('click', async () => {
    const file = mediaFileInput?.files?.[0];
    if (file) {
      try {
        uploadProgressBar?.classList.remove('hidden');
        uploadMediaButton.disabled = true;
        const result = await uploadToR2(file, updateProgress);
        console.log('Media uploaded successfully:', result);
        
        // Keep the preview visible
        mediaPreview?.classList.remove('hidden');
        
        // Hide upload controls
        uploadControls?.classList.add('hidden');
      } catch (error) {
        console.error('Failed to upload media:', error);
        alert('Failed to upload media. Please try again.');
      } finally {
        uploadProgressBar?.classList.add('hidden');
        if (uploadProgressBarFill) uploadProgressBarFill.style.width = '0%';
      }
    } else {
      alert('Please select a file to upload.');
    }
  });

  function updateProgress(progress: number) {
    if (uploadProgressBarFill) {
      uploadProgressBarFill.style.width = `${progress}%`;
    }
  }

  // Handle left panel button clicks
  const mediaBtn = document.getElementById('mediaBtn');
  const notesBtn = document.getElementById('notesBtn');
  const logsBtn = document.getElementById('logsBtn');
  const metadataBtn = document.getElementById('metadataBtn');
  const mediaContent = document.getElementById('mediaContent');
  const notesContent = document.getElementById('notesContent');
  const logsContent = document.getElementById('logsContent');
  const metadataContent = document.getElementById('metadataContent');

  function showContent(content: HTMLElement | null) {
    [mediaContent, notesContent, logsContent, metadataContent].forEach(el => el?.classList.add('hidden'));
    content?.classList.remove('hidden');
  }

  mediaBtn?.addEventListener('click', () => showContent(mediaContent));
  notesBtn?.addEventListener('click', () => showContent(notesContent));
  logsBtn?.addEventListener('click', () => showContent(logsContent));
  metadataBtn?.addEventListener('click', () => showContent(metadataContent));

  // Logs functionality
  const addLogBtn = document.getElementById('addLogBtn');
  const logEntries = document.getElementById('logEntries');
  const addLogModal = document.getElementById('addLogModal');
  const submitLogBtn = document.getElementById('submitLogBtn');
  const logSearch = document.getElementById('logSearch') as HTMLInputElement;

  addLogBtn?.addEventListener('click', () => {
    addLogModal?.classList.remove('hidden');
  });

  submitLogBtn?.addEventListener('click', () => {
    const name = (document.getElementById('logName') as HTMLInputElement).value;
    const age = (document.getElementById('logAge') as HTMLInputElement).value;
    
    if (name && age) {
      const logEntry = document.createElement('div');
      logEntry.className = 'p-2 bg-gray-100 rounded';
      logEntry.textContent = `Name: ${name}, Age: ${age}`;
      logEntries?.appendChild(logEntry);
      addLogModal?.classList.add('hidden');
      (document.getElementById('logName') as HTMLInputElement).value = '';
      (document.getElementById('logAge') as HTMLInputElement).value = '';
    }
  });

  // Close modal when clicking outside
  addLogModal?.addEventListener('click', (e) => {
    if (e.target === addLogModal) {
      addLogModal.classList.add('hidden');
    }
  });

  // Search functionality
  logSearch?.addEventListener('input', () => {
    const searchTerm = logSearch.value.toLowerCase();
    const logs = logEntries?.children;
    if (logs) {
      Array.from(logs).forEach((log) => {
        const text = log.textContent?.toLowerCase();
        if (text?.includes(searchTerm)) {
          (log as HTMLElement).style.display = '';
        } else {
          (log as HTMLElement).style.display = 'none';
        }
      });
    }
  });

  // Show Notes content by default
  showContent(notesContent);

  // Add this to handle the auto-expanding textarea for the title
  const titleTextarea = document.getElementById('title') as HTMLTextAreaElement;
  titleTextarea?.addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = (this.scrollHeight) + 'px';
  });
</script>

<style>
  /* ... (rest of the styles remain unchanged) ... */

  /* Remove border from EditorJS container */
  #editorjs {
    @apply border-none;
  }

  /* EditorJS styles */
  #editorjs {
    @apply max-w-none;
    min-height: 300px;
    padding-bottom: 100px; /* Increase padding at the bottom */
  }

  /* Add custom styles for Editor.js to ensure consistent alignment with more padding */
  :global(.ce-block__content),
  :global(.ce-toolbar__content) {
    max-width: none;
    margin-left: 0;
    padding-left: 40px; /* Set to 40px */
    padding-right: 40px; /* Set to 40px */
  }

  /* Adjust the toolbar position */
  :global(.ce-toolbar__plus) {
    left: 0px; /* Align with the new padding */
  }

  :global(.ce-toolbar__actions) {
    right: 0px; /* Align with the new padding */
  }

  /* Add spacing between blocks in the editor */
  :global(.ce-block:not(:last-child)) {
    margin-bottom: 1.5em;
  }

  /* Style for the multiline title input */
  #title {
    resize: none;
    overflow: hidden;
    min-height: 1.5em;
    line-height: 1.5;
  }

  /* Add these new styles */
  .container {
    max-width: 1200px;
  }

  #editorjs {
    min-height: 300px;
  }

  /* Adjust input and select styles for consistency */
  input[type="text"],
  input[type="datetime-local"],
  select,
  textarea {
    @apply mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm;
  }

  /* Style the EditorJS container */
  #editorjs {
    @apply border border-gray-300 rounded-md p-4;
  }

  /* Remove border from EditorJS container */
  #editorjs {
    @apply border-none p-0;
  }

  /* Styles for EditorJS headings */
  :global(.ce-header) {
    padding: 0.5em 0;
  }

  :global(h1.ce-header) {
    font-size: 2.5em;
    font-weight: bold;
  }

  :global(h2.ce-header) {
    font-size: 2em;
    font-weight: bold;
  }

  :global(h3.ce-header) {
    font-size: 1.75em;
    font-weight: bold;
  }

  :global(h4.ce-header) {
    font-size: 1.5em;
    font-weight: bold;
  }

  :global(h5.ce-header) {
    font-size: 1.25em;
    font-weight: bold;
  }

  :global(h6.ce-header) {
    font-size: 1em;
    font-weight: bold;
  }

  /* Add these new styles */
  #logSearch {
    @apply text-sm;
  }

  #addLogBtn {
    @apply transition-colors duration-200;
  }

  #addLogModal {
    @apply transition-opacity duration-300;
  }
</style>