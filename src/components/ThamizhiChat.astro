---
// Server-side code
import { Groq } from 'groq-sdk';

interface Message {
  role: 'user' | 'assistant' | 'error';
  content: string;
}

let messages: Message[] = [];
const apiKey = import.meta.env.GROQ_API_KEY;
---

<div id="thamizhi" class="flex flex-col h-full bg-gray-50">
  <div class="flex-1 overflow-y-auto p-4" id="chat-messages">
    <div class="space-y-4">
      {messages.map((message) => (
        <div class={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
          <div class={`max-w-3/4 p-3 rounded-lg ${
            message.role === 'user' 
              ? 'bg-blue-500 text-white' 
              : message.role === 'error'
              ? 'bg-red-500 text-white'
              : 'bg-white text-gray-800 shadow-md'
          }`}>
            {message.content}
          </div>
        </div>
      ))}
    </div>
  </div>
  <div class="p-4 bg-white border-t">
    <div class="flex space-x-2">
      <input
        type="text"
        id="chat-input"
        class="flex-1 p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
        placeholder="Type your message..."
      />
      <button id="send-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
          <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
        </svg>
        Send
      </button>
    </div>
  </div>
</div>

<script>
  const apiKey = '{apiKey}'; // Injected from server-side
  const chatMessages = document.getElementById('chat-messages');
  const chatInput = document.getElementById('chat-input') as HTMLInputElement | null;
  const sendButton = document.getElementById('send-button');

  interface Message {
    role: 'user' | 'assistant' | 'error';
    content: string;
  }

  let messages: Message[] = [];

  async function sendMessage() {
    if (!chatInput || !chatInput.value.trim()) return;

    const message = chatInput.value.trim();
    addMessage(message, 'user');
    chatInput.value = '';

    try {
      console.log('Sending request to /api/groq-chat');
      const response = await fetch('/api/groq-chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ messages: [{ role: 'user', content: message }] }),
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Error response:', errorText);
        throw new Error(`Failed to get response from server: ${response.status}. Error: ${errorText}`);
      }

      const data = await response.json();
      console.log('Response data:', data);
      addMessage(data.reply, 'assistant');
    } catch (error: unknown) {
      console.error('Error:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      addMessage(`An error occurred. Please try again. Details: ${errorMessage}`, 'error');
    }
  }

  function addMessage(content: string, role: 'user' | 'assistant' | 'error') {
    messages.push({ role, content });
    updateChatUI();
  }

  function updateChatUI() {
    if (!chatMessages) return;

    const messagesHTML = messages.map((message) => `
      <div class="flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}">
        <div class="max-w-3/4 p-3 rounded-lg ${
          message.role === 'user' 
            ? 'bg-blue-500 text-white' 
            : message.role === 'error'
            ? 'bg-red-500 text-white'
            : 'bg-white text-gray-800 shadow-md'
        }">
          ${message.content}
        </div>
      </div>
    `).join('');

    chatMessages.innerHTML = `<div class="space-y-4">${messagesHTML}</div>`;
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  sendButton?.addEventListener('click', sendMessage);
  chatInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  });
</script>